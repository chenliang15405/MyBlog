import React, {Component} from 'react'
import {Row, Col, Comment, Avatar, Input, Select, Form, Button, Tooltip, Icon, message} from 'antd'
import {Link} from 'react-router-dom'
import moment from 'moment'

import ReplyArea from './ReplyArea'

import { createComment, getCommentsList, favoriteComment } from '../api/comment'
import { starArticle } from '../api/blogInfo'
import { getLabelListByBlogId } from '../api/tag'

const Option = Select.Option;
const TextArea = Input.TextArea;


const selectBefore = (
    <Select defaultValue="Http://" style={{ width: 90 }}>
        <Option value="Http://">Http://</Option>
        <Option value="Https://">Https://</Option>
    </Select>
);
const selectAfter = (
    <Select defaultValue=".com" style={{ width: 80 }}>
        <Option value=".com">.com</Option>
        <Option value=".jp">.jp</Option>
        <Option value=".cn">.cn</Option>
        <Option value=".org">.org</Option>
    </Select>
);


//ËØÑËÆ∫
const Editor = ({
                    onChange, onSubmit, submitting, value,showUserInfo
                }) => (
    <div onClick={showUserInfo}>
        <Form.Item>
            <TextArea rows={4} onChange={onChange} value={value} />
        </Form.Item>
        <Form.Item>
            <Button
                htmlType="submit"
                loading={submitting}
                onClick={onSubmit}
                type="primary"
            >
                Add Comment
            </Button>
        </Form.Item>
    </div>
);

/**
 * Èò≤ÊäñÂáΩÊï∞
 * @param func ÈúÄË¶ÅÊâßË°åÁöÑÂáΩÊï∞
 * @param wait Èò≤ÊäñÊó∂Èó¥
 * @returns {Function}
 */
function debounce(func, wait=200) {
    let timeout;  // ÂÆöÊó∂Âô®ÂèòÈáè
    return function(event){
        clearTimeout(timeout);  // ÊØèÊ¨°Ëß¶ÂèëÊó∂ÂÖàÊ∏ÖÈô§‰∏ä‰∏ÄÊ¨°ÁöÑÂÆöÊó∂Âô®,ÁÑ∂ÂêéÈáçÊñ∞ËÆ°Êó∂
        event.persist && event.persist()   //‰øùÁïôÂØπ‰∫ã‰ª∂ÁöÑÂºïÁî®
        //const event = e && {...e}   //Ê∑±Êã∑Ë¥ù‰∫ã‰ª∂ÂØπË±°
        timeout = setTimeout(()=>{
            func(event)
        }, wait);  // ÊåáÂÆö xx ms ÂêéËß¶ÂèëÁúüÊ≠£ÊÉ≥ËøõË°åÁöÑÊìç‰Ωú handler
    };
}

/**
 * blog info footer
 */
export default class BlogInfoFooter extends Component {


   constructor(props) {
        super(props)
        this.state = {
            labels:[],
            submitting: false, //Êèê‰∫§ËØÑËÆ∫Êó∂ÔºåÊåâÈíÆÊòØÂê¶loading
            commentValue : '', //ËØÑËÆ∫ÁöÑÊñáÊú¨
            blogId: props.blogId,
            userId: '',
            commentLevel: 1,
            parentId: null,
            commentList:[],
            commentTotalNum: 0,
            page: 1,
            size: 6,
            likes: 0,
            dislikes: 0,
            action: null,
            showReplyInput: false,
            showReplyInputId: '',
            stared: props.isStar
        }
    }

    componentWillMount() {
       // Ëé∑ÂèñÊ†áÁ≠æÂàóË°®
      this.getLabelList()

      // Ëé∑ÂèñËØÑËÆ∫ÂàóË°®
      this.getCommentsList()
    }

    // Êé•Êî∂Áà∂ÁªÑ‰ª∂ÂºÇÊ≠•‰º†ÈÄíÂèÇÊï∞
    componentWillReceiveProps(nextProps){
        if(nextProps.isStar !== this.state.stared) {
            this.setState({
                stared: nextProps.isStar
            })
        }
    }


    // Ëé∑ÂèñÊ†áÁ≠æÂàóË°®
    getLabelList = async () => {
      const { blogId } = this.state
      // console.log("blogid ",this.props.blogId)
      try {
          const response = await getLabelListByBlogId(blogId)
          if(response.code === 20000) {
            const data = response.data
            // console.log("blog_label:", data)
            this.setState({
                labels: data
            })
          }
      } catch (e) {
          console.log('getLabelList error', e)
      }
    }

    // Ëé∑ÂèñËØÑËÆ∫ÂàóË°®
    getCommentsList = async () => {
      try {
          const { blogId, page, size } = this.state
          const resp = await getCommentsList(blogId, page, size)
          if(resp.code === 20000) {
            this.setState({
              commentList: resp.data.rows,
              commentTotalNum: resp.data.total
            })
          }
        // console.log('comment list',resp)
      } catch (e) {
          console.log('getCommentsList error', e)
      }
    }

    //ËæìÂÖ•ËØÑËÆ∫
    handleChange = (e) => {
        this.setState({
            commentValue: e.target.value
        })
    }

    //Êèê‰∫§ËØÑËÆ∫
    handleSubmit = async () => {
      const { blogId, commentValue, userId, commentLevel, parentId} = this.state
      const data = {
          blogId,
          content: commentValue,
          userId,
          parentId,
          commentLevel
      }
      try {
          const resp = await createComment(data)
          // console.log('handleSubmit resp', resp)
          if (resp.code === 20000) {
             this.setState({commentValue: ''})
             message.success("ËØÑËÆ∫Â∑≤Êèê‰∫§")
             this.getCommentsList()
          } else {
             message.error("ËØÑËÆ∫Â§±Ë¥•ÔºåËØ∑ÂÜçËØï‰∏ÄÊ¨°")
          }
      } catch (e) {
          console.log('handleSubmit comment error', e)
      }

    }

    //Ëß¶ÂèëÁî®Êà∑‰ø°ÊÅØ
    showUserInfo = () => {
        //Áî®‰∫ésetAttributeÁöÑËé∑ÂèñÁöÑÂÆπÂô®ÔºåÂøÖÈ°ªÊòØhtmlÊ†áÁ≠æÔºå‰∏çËÉΩÊòØÁªÑ‰ª∂‰∏≠Ê†áÁ≠æÔºå‰æãÂ¶Ç Row
        let userInfoBox = this.refs.userInfo
        userInfoBox.setAttribute('style','display:block;')
    }

    //Âø´ÈÄüÂõûÂ§ç
    autoComment = (value) => {
        let {commentValue} = this.state
        this.setState({
            commentValue: commentValue + value
        })
    }

    // ÁÇπËµûËØÑËÆ∫
    like = async (id) => {
      // ÁÇπËµû‰ºöÂ∞Ü action„ÄÅid „ÄÅ ip ‰øùÂ≠òÂà∞redisÈáåÂç≥‰øùËØÅ‰∫Ü‰∏çÈáçÂ§çÁÇπËµûÂíåÂä®‰ΩúÔºåÁÑ∂ÂêéÁÇπËµûÊ¨°Êï∞+1Âà∞Êï∞ÊçÆÂ∫ìÔºåmqÂèëÈÄÅÊ∂àÊÅØÈÄöÁü•Âçö‰∏ª
      const resp = await favoriteComment(id, 'like')
      if(resp.code === 20000) {
        this.getCommentsList()
      } else if(resp.code === 20005) {
        message.success(resp.message);
      }
    }

    // ÂèñÊ∂àÁÇπËµûËØÑËÆ∫
    dislike = async (id) => {
      const resp = await favoriteComment(id, 'dislike')
      if(resp.code === 20000) {
        this.getCommentsList()
      } else if(resp.code === 20005) {
        message.success(resp.message);
      }
    }

    // ÁÇπËµûÊñáÁ´†
    // ‰ΩøÁî®Èò≤ÊäñÂáΩÊï∞ÔºåÈò≤Ê≠¢ÈáçÂ§çÁÇπÂáª
    star = debounce((blogId) => {
        this.starGo(blogId)
    })

    starGo = async (blogId) => {
        const resp = await starArticle(blogId);
        console.log(resp)
        if(resp.code === 20000) {
            message.success('ËµûüëçÔΩû')
        } else if(resp.code === 20005) {
            message.success("Â∑≤ÁªèÁÇπËøáËµûÂï¶ÔΩû")
        } else {
            message.error("ÊúçÂä°Âô®ÁÇ∏‰∫ÜÔºÅÔºÅÔºÅ")
        }
    }


    reply = (id) => {
      this.setState({
        showReplyInput: !this.state.showReplyInput,
        showReplyInputId: id
      })
    }

    closeReplayInput = () => {
      this.setState({showReplyInput: false})
    }



    render() {
        const { blogId, stared, submitting, commentValue, commentList, commentTotalNum, showReplyInput, showReplyInputId} = this.state;

        /*TODO react‰∏≠ÊúÄÂ•Ω‰∏çË¶ÅÁõ¥Êé•Âú®onClick={this.like} ËøôÊ†∑ÁªëÂÆöÊñπÊ≥ïÔºåÂê¶Âàô‰ºöÂú®Âä†ËΩΩÊó∂Ëß¶ÂèëÔºåÊúÄÂ•Ω‰ΩøÁî®ÁÆ≠Â§¥ÂáΩÊï∞ onClick={()=>{this.like}}*/
        const actions = (id, likes, dislikes, action) => [
                <span>
                    <Tooltip title="666">
                      <Icon
                        type="like"
                        theme={action === 'like' ? 'filled' : 'outlined'}
                        onClick={() => this.like(id)}
                      />
                    </Tooltip>
                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{likes}</span>
                  </span>,
                  <span>
                    <Tooltip title="999">
                      <Icon
                        type="dislike"
                        theme={action === 'dislike' ? 'filled' : 'outlined'}
                        onClick={() => this.dislike(id)}
                      />
                    </Tooltip>
                    <span style={{ paddingLeft: 8, cursor: 'auto' }}>{dislikes}</span>
                  </span>,
                  <span onClick={() => this.reply(id)}>{showReplyInput ? 'Cancel' : 'Reply to'}</span>,
          ]

        //ËØÑËÆ∫ÂàóË°®Â±ïÁ§∫
        const ExampleComment = ({ children, userName, avatar, content, actions,createDate, showReplyInput, showReplyInputId, id}) => (
          <Comment
            actions={actions}
            author={<a>{userName}</a>}
            avatar={(
              <Avatar
                src={avatar}
                alt="Han Solo"
              />
            )}
            content={<p>{content}</p>}
            datetime={
              createDate != null ? <Tooltip title={moment(createDate).format('YYYY-MM-DD HH:mm:ss')}>
                  <span>{moment(createDate).fromNow()}</span>
                </Tooltip>
                : null
            }
          >
            {
              showReplyInput && showReplyInputId === id ?
                <ReplyArea commentId={id} refreshCommentList={() => this.getCommentsList()} closeShowInput={() => this.closeReplayInput()}/>
                : null
            }
            {children}
          </Comment>
        );



        return (
            <Row className='blog-info-footer'>
                <Row className='blog-footer-tags'>
                    <i className='iconfont'>&#xe676;</i>
                    Ê†áÁ≠æ: {
                        this.state.labels.map((item,key) => {
                            return (
                                <span key={key} className='tag-item'>
                                    {item.labelname}
                                </span>
                            )
                        })
                    }
                </Row>
                <Row className='copy-right'>
                    <div className={'copy-right-title'}>
                        ÊñáÁ´†ÁâàÊùÉÂèäËΩ¨ËΩΩÂ£∞ÊòéÔºö
                    </div>
                    <div className='copy-right-statement'>
                        <p>‰ΩúËÄÖ:  <a href="http://localhost:3000/" style={{color:'red'}}>ÂîêÂÆã</a> ,{window.location.href},ÂèëÂ∏É‰∫é ({this.props.createDate})</p>
                        <p>ÊñáÁ´†ËΩ¨ËΩΩÊàñÂ§çÂà∂ËØ∑Ê≥®ÊòéÂá∫Â§Ñ<a href="http://localhost:3000/" style={{color:'red'}}> ÂîêÂÆã‰∏™‰∫∫ÂçöÂÆ¢</a></p>
                    </div>
                </Row>
                <Row className='share-great'>
                    <Col className='share-box'>
                        <div>
                            <span>ÂàÜ‰∫´: </span>
                        </div>
                        <div className='share-item'>
                            {/*TODO icon*/}
                            {/*<i></i>*/}
                            <a href="http://www.baidu.com">ÂæÆÂçö</a>
                        </div>
                        <div className='share-item'>
                            {/*<i></i>*/}
                            <a href="http://www.baidu.com">ÂæÆ‰ø°</a>
                        </div>
                        <div className='share-item'>
                            {/*<i></i>*/}
                            <a href="http://www.baidu.com">QQ</a>
                        </div>
                    </Col>
                    <Col className='great-pay-box'>
                        <div className={[`great-but ${stared ? 'great-but-change' : ''}`]} onClick={() => this.star(blogId)}>
                            <i className='iconfont great'>&#xe676;</i>
                            <span className='word'>  Start(10)</span>
                        </div>
                        <div className='pay-but'>
                            <i className='iconfont pay'>&#xe6c3;</i>
                            <span className='word'>ÊîØÊåÅ‰∏Ä‰∏ã</span>
                        </div>
                    </Col>

                </Row>
                <Row className='previous-next-box'>
                    <Row className='previous-next'>
                        <Col className='previous'>
                            <Link to=''>
                                <p>‰∏ä‰∏ÄÁØá</p>
                                <span>zblogÁôæÂ∫¶MIPËΩªÂ•¢‰∏ªÈ¢òLightleeÁªô‰Ω†ÊûÅÈÄü‰ΩìÈ™å</span>
                            </Link>
                        </Col>
                        <div className='separator'></div>
                        <Col className='next'>
                            <Link to=''>
                                <p>‰∏ä‰∏ÄÁØá</p>
                                <span>zblogÁôæÂ∫¶MIPËΩªÂ•¢‰∏ªÈ¢òLightleeÁªô‰Ω†ÊûÅÈÄü‰ΩìÈ™å</span>
                            </Link>
                        </Col>
                    </Row>
                </Row>
                <div className='user-info-box' ref='userInfo'>
                    {/*TODO ÂèØ‰ª•ÂÆûÁé∞‰∏Ä‰∏™Êâ´Á†ÅÁôªÂΩïÁΩëÁ´ôÊï∞ÊçÆÔºåÈÄöËøáÁîüÊàê‰∏Ä‰∏™ÈöèÊú∫ÁöÑÁî®Êà∑‰ø°ÊÅØÔºåÁÑ∂ÂêéÁî®Êà∑Êâ´Á†Å‰πãÂêé‰ºöÁîüÊàê‰∏Ä‰∏™ÈöèÊú∫ÁöÑÁî®Êà∑‰ø°ÊÅØÔºåËé∑ÂèñÂà∞ËØ•IpÔºåÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ*/}
                    {/*ÁÇπÂáªËØÑËÆ∫Ôºå‰ºöÊòæÁ§∫Á™óÊà∑ÈúÄË¶ÅÂ°´ÂÜô‰ø°ÊÅØ*/}
                    <div className='user-info'>
                        <span className='tips'>ÊòµÁß∞:</span>
                        <Input placeholder="ÊòµÁß∞(ÂøÖÂ°´)" allowClear onChange={(e)=> console.log(e.target.value)} />
                    </div>
                    <div className='user-info'>
                        <span className='tips'>ÈÇÆÁÆ±:</span>
                        <Input placeholder="ÈÇÆÁÆ±(ÈÄâÂ°´)" allowClear onChange={(e)=> console.log(e.target.value)} />
                    </div>
                    <div className='user-info url'>
                        <span className='tips'>ÁΩëÂùÄ:</span>
                        <Input addonBefore={selectBefore} allowClear addonAfter={selectAfter}  placeholder="ÁΩëÂùÄ(ÈÄâÂ°´)"/>
                    </div>
                </div>

                <Row className='comment-post-box'>
                    <div className='comment-title'>
                        <i></i>
                        <h4>ÂèëË°®ËØÑËÆ∫</h4>
                    </div>
                    <div className='fast-comment'>
                        <span style={{marginRight:'5px'}}>Âø´Êç∑ÂõûÂ§ç:</span>
                        <a href='javascript:void(0);' title="ÊñáÁ´†‰∏çÈîô,ÂÜôÁöÑÂæàÂ•ΩÔºÅ" onClick={()=>this.autoComment('ÊñáÁ´†‰∏çÈîô,ÂÜôÁöÑÂæàÂ•ΩÔºÅ')}>
                            <i className='iconfont'>&#xe60c;</i>
                        </a>
                        <a  href="javascript:void(0);" title="emmmmm... Áúã‰∏çÊáÇÊÄé‰πàÁ†¥Ôºü"  onClick={()=>this.autoComment('emmmmm... Áúã‰∏çÊáÇÊÄé‰πàÁ†¥Ôºü')}>
                            <i className='iconfont'>&#xe627;</i>
                        </a>
                        <a  href="javascript:void(0);" title="Ëµû„ÄÅÁãÇËµû„ÄÅË∂ÖËµû„ÄÅ‰∏çÂæó‰∏çËµû„ÄÅÂè≤‰∏äÊúÄËµûÔºÅ"  onClick={()=>this.autoComment('Ëµû„ÄÅÁãÇËµû„ÄÅË∂ÖËµû„ÄÅ‰∏çÂæó‰∏çËµû„ÄÅÂè≤‰∏äÊúÄËµûÔºÅ')}>
                            <i className='iconfont'>&#xe657;</i>
                        </a>
                    </div>
                    <div>
                      {/* TODO ËØÑËÆ∫‰∏≠‰∏≠ÈõÜÊàêË°®ÊÉÖ*/}
                       <Comment
                            content={(
                                <Editor
                                    onChange={this.handleChange}
                                    onSubmit={this.handleSubmit}
                                    submitting={submitting}
                                    value={commentValue}
                                    showUserInfo = {this.showUserInfo}
                                />
                            )}
                        />
                    </div>
                </Row>
                <Row>
                    {/*
                        TODO ÂèØ‰ª•ÈÄöËøámapÂæ™ÁéØÊù•Â±ïÁ§∫ËØÑËÆ∫ÂàóË°®ÔºåÈÄöËøáÂæ™ÁéØÁà∂ËØÑËÆ∫ÔºåÁÑ∂ÂêéÂà§Êñ≠ÊòØÂê¶ÊúâËá™ËØÑËÆ∫ÔºåÂ¶ÇÊûúÊúâÔºåÂÜçÂæ™ÁéØÂ≠êËØÑËÆ∫ÔºåÂè™Âæ™ÁéØ3Â±ÇÔºåÁÑ∂ÂêéÂ±ïÁ§∫ÊâÄÊúâÁöÑËØÑËÆ∫
                        Áà∂ËØÑËÆ∫ÈÄöËøáidÂÖ≥ËÅîblogÔºåÁ¨¨‰∫åÂ±ÇËá™ËØÑËÆ∫ÈÄöËøáÂÖ≥ËÅîblog‰ª•ÂèäÁà∂ËØÑËÆ∫ÁöÑid,Á¨¨‰∏âÂ±Ç‰πüÊòØÂÖ≥ËÅîblog‰ª•ÂèäÁà∂ËØÑËÆ∫ÁöÑidÔºåÂè™‰∏çËøáÂæ™ÁéØÁöÑ‰∏ç‰∏ÄÊ†∑
                         ÊàñËÄÖËØ¥ÂèØ‰ª•ÂÅöÊàêÊâãÈ£éÁê¥ËèúÂçï
                    */}
                    <div className='comment-list-title'>
                        <span>ËØÑËÆ∫ÂàóË°®Ôºö</span>
                        <i className='iconfont'>&#xe7f4;</i>
                        <span>{commentTotalNum}</span>
                    </div>
                    <div className='comment-list'>
                        {
                            // TODO Âú®ÂêéÁ´ØÊ†πÊçÆparentId Â∑≤ÁªèÊü•ËØ¢Âà∞  List<Comment> ËøôÁßçÈõÜÂêà
                            commentList.map((item,key) => {
                                return (
                                      <ExampleComment actions={actions(item.id, item.likeNum, item.dislikeNum, item.action)} key={key} userName={item.userName} avatar={item.avatar} content={item.content} createDate={item.createDate} showReplyInput={showReplyInput} showReplyInputId={showReplyInputId} id={item.id}>
                                          {
                                            item.childrens && item.childrens.length > 0 ? item.childrens.map((secondItem,secondKey) => {
                                              return (
                                                <ExampleComment actions={actions(secondItem.id, secondItem.likeNum, secondItem.dislikeNum, secondItem.action)} key={secondKey} userName={secondItem.userName} avatar={secondItem.avatar} content={secondItem.content} createDate={secondItem.createDate} showReplyInput={showReplyInput} showReplyInputId={showReplyInputId} id={secondItem.id}>
                                                  {
                                                    secondItem.childrens && secondItem.childrens.length > 0 ? secondItem.childrens.map((threeItem,threeKey) => {
                                                      return (
                                                        <ExampleComment actions={actions(threeItem.id, threeItem.likeNum, threeItem.dislikeNum, threeItem.action)} key={threeKey} userName={threeItem.userName} avatar={threeItem.avatar} content={threeItem.content} createDate={threeItem.createDate} showReplyInput={showReplyInput} showReplyInputId={showReplyInputId} id={threeItem.id}/>
                                                      )
                                                    })
                                                      : null
                                                  }
                                                </ExampleComment>
                                              )
                                            })
                                              : null
                                          }
                                      </ExampleComment>

                                )
                            })

                        }
                    </div>
                </Row>
            </Row>
        )
    }

}